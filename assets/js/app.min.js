(function(){
  // Unhandled rejection guard (once only)
  if (!window.__UNHANDLED_GUARD__) {
    window.__UNHANDLED_GUARD__ = true;
    window.addEventListener('unhandledrejection', e => { e.preventDefault(); }, {capture:true});
  }
  
  // Additional unhandled rejection guard as requested
  if(!window.__UNHANDLED__){
    window.__UNHANDLED__=true;
    window.addEventListener('unhandledrejection',e=>e.preventDefault(),{capture:true});
  }
  
  // ===== UTILITIES (أضِف لمرة واحدة في أعلى البوتستراب قبل بقية الوحدات) =====
  if(!window.__FETCH_UTILS__){
    window.__FETCH_UTILS__ = true;

    // قراءة CSRF من <meta name="csrf-token" content="...">
    function __csrf(){
      var m=document.querySelector('meta[name="csrf-token"]');
      return m && m.getAttribute('content') || null;
    }

    function fetchWithTimeout(url, opts){
      opts = opts || {};
      var t = (typeof opts.timeout==='number') ? opts.timeout : 8000;
      var c = new AbortController(), id = setTimeout(function(){ c.abort(); }, t);
      var h = Object.assign({'X-Requested-With':'XMLHttpRequest'}, opts.headers || {});
      var token = __csrf(); if(token){ h['X-CSRF-Token'] = token; }
      // منع كاش قديم في بعض الاستضافات
      var u = new URL(url, location.origin);
      u.searchParams.set('_', Date.now().toString());
      return fetch(u.toString(), Object.assign({}, opts, {signal:c.signal, headers:h, cache:'no-store', credentials:'same-origin'}))
        .finally(function(){ clearTimeout(id); });
    }

    async function safeFetchJSON(url, opts){
      try{
        var r = await fetchWithTimeout(url, opts);
        if(!r || !r.ok) return null;
        return await r.json().catch(function(){ return null; });
      }catch(_){ return null; }
    }
    
    // Make utilities globally available
    window.fetchWithTimeout = fetchWithTimeout;
    window.safeFetchJSON = safeFetchJSON;
  }
  
  // ===== LIVE WALLET BALANCE (تحقين منطقي، مع كشف تلقائي للمسار/المفتاح) =====
  if(!window.__WALLET_BADGE__){
    window.__WALLET_BADGE__ = true;

    (function(){
      var badge = document.getElementById('wallet-balance') || document.querySelector('[data-wallet-balance]');
      if(!badge) return; // لو ما في عنصر، انسحب بهدوء

      var endpoints = [
        '/api/wallet/balance.php',
        '/api/wallet/balance.json'
      ];
      var keys = ['balance','wallet_balance','balance_lyd','amount','value'];

      function fmtLyd(n){
        var v = Number(n);
        if(!isFinite(v)) v = 0;
        return 'LYD ' + v.toFixed(2);
      }

      function setBadge(val){
        badge.textContent = fmtLyd(val);
        // ARIA لطيفة
        badge.setAttribute('aria-live','polite');
        badge.setAttribute('aria-atomic','true');
      }

      async function loadBalance(){
        // امنع تكرار متوازٍ
        if(loadBalance.__inFlight) return;
        loadBalance.__inFlight = true;
        try{
          // تحقق من وجود عنصر الرصيد أولاً (يظهر فقط للمستخدمين المسجلين)
          if(!badge || !badge.isConnected) {
            return; // لا تحاول جلب الرصيد إذا لم يكن العنصر موجوداً
          }
          
          var data = null;
          for (var i=0;i<endpoints.length;i++){
            data = await safeFetchJSON(endpoints[i], {timeout:7000});
            if(data && typeof data === 'object') break;
          }
          var val = 0;
          if(data){
            for(var k=0;k<keys.length;k++){
              if(Object.prototype.hasOwnProperty.call(data, keys[k])){
                val = data[keys[k]];
                break;
              }
            }
          }
          setBadge(val);
        } finally {
          loadBalance.__inFlight = false;
        }
      }

      // تعبئة مبدئية - فقط إذا كان العنصر موجوداً
      if(badge && badge.isConnected) {
        setBadge(0);
        loadBalance();
      }

      // مستمع اختياري للتحديث إذا رجع المستخدم من صفحة المحفظة
      window.addEventListener('focus', function(){
        // تحقق من وجود العنصر قبل التحديث
        if(!badge || !badge.isConnected) return;
        
        // حدّث مرة كل 60 ثانية كحد أعلى
        var now = Date.now();
        if(!loadBalance.__ts || (now - loadBalance.__ts) > 60000){
          loadBalance.__ts = now; loadBalance();
        }
      }, {passive:true});

    })();
  }

  // ===== DISABLE OLD TOPBAR DROPDOWNS / EXPANDERS =====
  (function(){
    if(window.__DISABLE_TOPBAR_DROPDOWNS__ === undefined){
      window.__DISABLE_TOPBAR_DROPDOWNS__ = true;
    }
    if(window.__DISABLE_TOPBAR_DROPDOWNS__){
      // إن وجدت دوال init، لفّها بحيث لا تعمل على الشريط العلوي
      var badSel = ['[data-expander]', '.expander__toggle', '.expander__panel'];
      try{
        badSel.forEach(function(sel){
          document.querySelectorAll(sel).forEach(function(el){
            // إزالة listeners الشائعة إن أمكن
            el.onclick = null; el.onmouseenter = null; el.onmouseleave = null;
          });
        });
      }catch(_){}
    }
  })();

  // PRODUCTION GUARDS - Disable all debug output
  window.__DEBUG__ = false;
  window.__PROD__ = true;
  
  // Disable console methods in production
  if (!window.__DEBUG__) {
    for (const m of ['log','debug','info','warn','table','trace','time','timeEnd']) {
      console[m] = ()=>{};
    }
    if (window.performance) {
      ['mark','measure','clearMarks','clearMeasures'].forEach(k=>{
        if(performance[k]) performance[k]=()=>{};
      });
    }
  }
  
  // Basic fetch with timeout and no throwing after notification
  function fetchWithTimeout(url, opts){
    opts = opts || {};
    var t = typeof opts.timeout==='number'?opts.timeout:8000;
    var c = new AbortController(), id = setTimeout(()=>c.abort(), t);
    var h = Object.assign({'X-Requested-With':'XMLHttpRequest'}, opts.headers||{});
    return fetch(url, Object.assign({}, opts, {signal:c.signal, headers:h}))
      .finally(()=>clearTimeout(id));
  }
  
  async function safeFetchJSON(url, opts){
    try{
      const r = await fetchWithTimeout(url, opts);
      if(!r || !r.ok) return null;
      try { return await r.json(); } catch(_) { return null; }
    }catch(_) { return null; }
  }
  
  async function safeFetchHTML(url, opts){
    try{
      const r = await fetchWithTimeout(url, opts);
      if(!r || !r.ok) return null;
      return await r.text();
    }catch(_) { return null; }
  }
  
  // Make fetch helpers globally available
  window.fetchWithTimeout = fetchWithTimeout;
  window.safeFetchJSON = safeFetchJSON;
  window.safeFetchHTML = safeFetchHTML;
  
  // Remove preload class immediately to prevent FOUC
  document.documentElement.classList.remove('is-preload');
  
  // Loading Screen Management
  document.addEventListener('DOMContentLoaded', () => {
    const L = document.getElementById('loader');
    if (L) {
      requestAnimationFrame(() => L.classList.add('is-hide'));
    }
  });
  
  // Final verification complete
  console.info("App initialized successfully");
  
  const $ = s => document.querySelector(s);
  const $$ = s => document.querySelectorAll(s);

  // Dynamic Header Height & Safe Units
  function setHeaderH(){
    const h = 56; // Fixed height for top-bar only
    document.documentElement.style.setProperty('--header-h', h + 'px');
  }
  setHeaderH();
  addEventListener('resize', setHeaderH, {passive:true});

  // Instant Search Management
  if(!window.__INSTANT_SEARCH__){
    window.__INSTANT_SEARCH__=true;
    const el=document.querySelector('[data-instant-search]');
    let tid=null, ctrl=null;
    function run(){
      const q=(el.value||'').trim();
      const url=new URL(location.origin + '/catalog.php');
      if(q) url.searchParams.set('q', q);
      url.searchParams.set('page','1');
      if(ctrl) ctrl.abort(); ctrl=new AbortController();
      document.getElementById('filterBar')?.setAttribute('hidden',''); document.getElementById('filterBar-skel')?.removeAttribute('hidden');
      document.getElementById('grid')?.setAttribute('hidden','');     document.getElementById('grid-skel')?.removeAttribute('hidden');
      fetch(url.toString(),{signal:ctrl.signal,headers:{'X-Requested-With':'XMLHttpRequest'}})
        .then(r=>r.text()).then(html=>{
          if(!html) return;
          const tmp=document.createElement('div'); tmp.innerHTML=html;
          const nf=tmp.querySelector('#filterBar'), ng=tmp.querySelector('#grid');
          if(nf){ const f=document.getElementById('filterBar'); f&&f.replaceWith(nf); }
          if(ng){ const g=document.getElementById('grid'); g&&g.replaceWith(ng); }
          history.replaceState(null,'',url);
        }).catch(()=>{}).finally(()=>{
          document.getElementById('filterBar')?.removeAttribute('hidden'); document.getElementById('filterBar-skel')?.setAttribute('hidden','');
          document.getElementById('grid')?.removeAttribute('hidden');     document.getElementById('grid-skel')?.setAttribute('hidden','');
        });
    }
    el && el.addEventListener('input', ()=>{ clearTimeout(tid); tid=setTimeout(run, 320); }, {passive:true});
  }

  // Mobile Sidebar Management - DISABLED (secondary header removed)
  if(false && !window.__MOBILE_SIDEBAR__){
    window.__MOBILE_SIDEBAR__=true;
    const s=document.querySelector('.mobile-sidebar'), b=document.querySelector('.backdrop'), t=document.querySelector('[data-sidebar-toggle]'), c=document.querySelector('[data-sidebar-close]');
    
    function setSidebar(open){
      if(!s||!b) return;
      document.body.classList.toggle('no-scroll',open);
      s.classList.toggle('is-open',open); 
      b.classList.toggle('is-open',open);
      t && t.setAttribute('aria-expanded', open?'true':'false');
      if(open){ 
        setTimeout(()=>{ 
          const f=s.querySelector('a,button,input,select,textarea,[tabindex]:not([tabindex="-1"])'); 
          f&&f.focus(); 
        },40); 
      } else { 
        t && t.focus(); 
      }
    }
    
    t && t.addEventListener('click', e=>{ 
      e.preventDefault(); 
      setSidebar(!s.classList.contains('is-open')); 
    });
    
    c && c.addEventListener('click', e=>{ 
      e.preventDefault(); 
      setSidebar(false); 
    });
    
    b && b.addEventListener('click', ()=>setSidebar(false));
    
    document.addEventListener('keydown', e=>{ 
      if(e.key==='Escape') setSidebar(false); 
    });
    
    // Tab switching functionality
  function selectTab(btn){
    const id = btn?.dataset?.tab;
    if(!id) return;
    
    // إلغاء تفعيل جميع التبويبات
      document.querySelectorAll('.sidebar-tab').forEach(b=>b.setAttribute('aria-selected','false'));
    
    // تفعيل التبويب المختار
    btn.setAttribute('aria-selected','true');
    
    // إخفاء جميع اللوحات
      document.querySelectorAll('.sidebar-panel').forEach(p=>{
      p.hidden=true;
      p.style.display = 'none';
      p.style.opacity = '0';
      p.style.visibility = 'hidden';
    });
    
        // إظهار اللوحة المطلوبة
        const panel = document.getElementById('panel-'+id);
        if(panel) {
          panel.hidden=false;
          panel.style.display = 'block';
          panel.style.opacity = '1';
          panel.style.visibility = 'visible';
          panel.scrollTop = 0;
        }
  }

    // Bind tab switching
    document.addEventListener('click', (e)=>{
      const tabBtn = e.target.closest('.sidebar-tab'); 
      if(tabBtn) {
        e.preventDefault(); 
        selectTab(tabBtn); 
      }
    });
  }

  // Legacy drawer code removed - using mobile-sidebar system above

  // تشخيص سريع - DISABLED IN PRODUCTION

  /* حالة الدخول (تحديث حيّ للهيدر/الفوتر) */
  let _authPoll = { inFlight: false, failCount: 0, maxFails: 3, backoff: 1000, lastToastTime: 0 };
  
  // Enhanced fetch with timeout and AbortController
  function fetchWithTimeout(url, opts) {
    opts = opts || {};
    var timeout = typeof opts.timeout === 'number' ? opts.timeout : 8000;
    var ctrl = new AbortController();
    var id = setTimeout(function(){ ctrl.abort(); }, timeout);
    var headers = Object.assign({'X-Requested-With':'XMLHttpRequest'}, opts.headers || {});
    return fetch(url, Object.assign({}, opts, {signal: ctrl.signal, headers})).finally(function(){
      clearTimeout(id);
    });
  }
  
  // Resilient auth state polling
  async function pollAuthState(){
    if (_authPoll.inFlight) return null;
    _authPoll.inFlight = true;
    try {
      var data = await safeFetch('/auth/state.php', { timeout: 6000, credentials:'same-origin', cache:'no-store' });
      if (!data) {
        // treat as handled error; DO NOT throw to the outer scope
        return null;
      }
      
      // Handle auth state update
      const isLoggedIn = !!data.logged_in;
      document.documentElement.classList.toggle('auth-user', isLoggedIn);
      document.documentElement.classList.toggle('auth-guest', !isLoggedIn);
      
      // Update auth elements
      $$('[data-auth="user"]').forEach(el => {
        el.style.display = isLoggedIn ? '' : 'none';
      });
      $$('[data-auth="guest"]').forEach(el => {
        el.style.display = !isLoggedIn ? '' : 'none';
      });
      
      // Reset failure count on success
      _authPoll.failCount = 0;
      _authPoll.backoff = 1000;
      
      return data;
    } catch (err) {
      // Timeout/Abort or network error: handle but DO NOT throw
      _authPoll.failCount++;
      
      // Show toast only once per 60s and only after multiple failures
      const now = Date.now();
      if (_authPoll.failCount >= 2 && (now - _authPoll.lastToastTime) > 60000) {
        _authPoll.lastToastTime = now;
        // Optional toast - commented out to avoid noise
        // showToast && showToast({type: 'TIMEOUT', message: 'تم تجاوز وقت الانتظار - تحقق من اتصالك', duration: 5000});
      }
      
      // Stop aggressive polling after max failures
      if (_authPoll.failCount >= _authPoll.maxFails) {
        clearInterval(_authPoll._iv);
        _authPoll._iv = null;
      }
      
      return null;
    } finally {
      _authPoll.inFlight = false;
    }
  }
  
  // Start auth polling with backoff
  function startAuthPolling() {
    if (_authPoll._iv) return;
    
    _authPoll._iv = setInterval(function(){
      Promise.resolve(pollAuthState()).catch(function(){ /* NOOP */ });
    }, 30000);
    
    // Immediate first check
    Promise.resolve(pollAuthState()).catch(function(){ /* NOOP */ });
    
    // Reset on network events
    window.addEventListener('online', function(){
      _authPoll.failCount = 0;
      if (!_authPoll._iv) startAuthPolling();
    });
    
    window.addEventListener('offline', function(){
      // Optional: pause polling when offline
    });
  }
  
  // Legacy function for backward compatibility
  async function refreshAuthUI() {
    return Promise.resolve(pollAuthState()).catch(function(){ /* NOOP */ });
  }

  // تحسين الأداء - تشغيل بعد DOMContentLoaded
  document.addEventListener('DOMContentLoaded', ()=>{
    startAuthPolling(); // Start the new polling system
    
    // تحسينات إضافية بعد تحميل الصفحة
    setTimeout(() => {
      // إضافة loading="lazy" للصور إن وجدت
      document.querySelectorAll('img:not([loading])').forEach(img => {
        img.loading = 'lazy';
        img.decoding = 'async';
      });
      
      // إضافة active class للرابط الحالي في bottom navigation
      const currentPath = window.location.pathname;
      $$('.bottom-nav-item').forEach(item => {
        const href = item.getAttribute('href');
        if (href && (currentPath === href || currentPath.startsWith(href + '/'))) {
          item.classList.add('active');
        }
      });
      
      // إضافة active class للرابط الحالي في القائمة الجانبية
      $$('.drawer .nav-link').forEach(link => {
        const href = link.getAttribute('href');
        if (href && (currentPath === href || currentPath.startsWith(href + '/'))) {
          link.classList.add('active');
        }
      });
      
    }, 100);
  });
  
  document.addEventListener('visibilitychange', function(){ 
    if(!document.hidden) Promise.resolve(pollAuthState()).catch(function(){ /* NOOP */ });
  });

  // دوال للوصول العام
  window.refreshAuthUI = refreshAuthUI;
  window.pollAuthState = pollAuthState;
  window.startAuthPolling = startAuthPolling;
  
  // Global Guard for Unhandled Promise Rejections
  if (!window.__UNHANDLED_GUARD__) {
    window.__UNHANDLED_GUARD__ = true;
    window.addEventListener('unhandledrejection', function(e){
      // Prevent noisy "Uncaught (in promise)" in console
      e.preventDefault();
      // Optional: show a throttled toast only for network timeouts to avoid silence
      try {
        const r = e.reason || {};
        if (r && (r.type === 'TIMEOUT' || r.name === 'AbortError')) {
          // throttle by timestamp on window to avoid toast storms
          const now = Date.now();
          if (!window.__lastTOAST__ || (now - window.__lastTOAST__ > 60000)) {
            window.__lastTOAST__ = now;
            // if you have a toast util, call it here; otherwise do nothing
            // showToast && showToast({type:'TIMEOUT', message:'تم تجاوز وقت الانتظار - تحقق من اتصالك بالإنترنت', duration:5000});
          }
        }
      } catch(_) {}
    }, {capture:true});
  }
})();

// ===== Debounce Utility =====
(function() {
  'use strict';
  
  // Debounce function - delays execution until user stops typing
  function debounce(func, wait) {
    var timeout;
    return function executedFunction() {
      var context = this;
      var args = arguments;
      var later = function() {
        timeout = null;
        func.apply(context, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  
  // Loading state manager
  function showLoading(element, message) {
    if (!element) return;
    
    var loadingHTML = '<div class="loading-overlay">' +
      '<div class="loading-spinner"></div>' +
      (message ? '<p class="loading-text">' + message + '</p>' : '') +
      '</div>';
    
    // Add loading class and overlay
    element.classList.add('is-loading');
    element.style.position = 'relative';
    
    var overlay = document.createElement('div');
    overlay.innerHTML = loadingHTML;
    overlay.className = 'loading-container';
    element.appendChild(overlay.firstChild);
  }
  
  function hideLoading(element) {
    if (!element) return;
    
    element.classList.remove('is-loading');
    var overlay = element.querySelector('.loading-overlay');
    if (overlay) {
      overlay.remove();
    }
  }
  
  // Circular JSON guard
  function safeJSONStringify(obj) {
    const seen = new WeakSet();
    return JSON.stringify(obj, (k, v) => {
      if (typeof v === 'object' && v !== null) {
        if (seen.has(v)) return '[Circular]';
        seen.add(v);
      }
      return v;
    });
  }

  // Filter persistence utility
  const FilterPersistence = {
    save: function(screenName, filters) {
      try {
        localStorage.setItem(`filters_${screenName}`, safeJSONStringify(filters));
      } catch (e) {
        // Silent error handling in production
      }
    },
    
    load: function(screenName) {
      try {
        const saved = localStorage.getItem(`filters_${screenName}`);
        return saved ? JSON.parse(saved) : {};
      } catch (e) {
        // Silent error handling in production
        return {};
      }
    },
    
    clear: function(screenName) {
      try {
        localStorage.removeItem(`filters_${screenName}`);
      } catch (e) {
        // Silent error handling in production
      }
    }
  };

  // Enhanced debounced search with persistence and reentrancy guards
  function setupDebouncedSearch(inputSelector, screenName, callback) {
    const input = $(inputSelector);
    if (!input) return;
    
    // Reentrancy guard
    let loading = false;
    
    // Load saved search term
    const savedFilters = FilterPersistence.load(screenName);
    if (savedFilters.search && !input.value) {
      input.value = savedFilters.search;
    }
    
    const debouncedSearch = debounce(function() {
      if (loading) return; // Prevent reentrant calls
      
      const searchTerm = input.value.trim();
      
      // Save search term
      const currentFilters = FilterPersistence.load(screenName);
      currentFilters.search = searchTerm;
      FilterPersistence.save(screenName, currentFilters);
      
      if (callback) {
        loading = true;
        try {
          callback(searchTerm);
        } finally {
          loading = false;
        }
      }
    }, 300);
    
    // ONE-TIME EVENT BINDING
    if (!input.__search_bound__) {
      input.__search_bound__ = true;
      
      input.addEventListener('input', debouncedSearch, { passive: true });
      input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          debouncedSearch.flush();
        }
      });
      
    }
  }

  // Filter form persistence
  function setupFilterPersistence(formSelector, screenName) {
    const form = $(formSelector);
    if (!form) return;
    
    // Load saved filters on page load
    const savedFilters = FilterPersistence.load(screenName);
    
    // Apply saved values to form elements
    Object.keys(savedFilters).forEach(key => {
      const element = form.querySelector(`[name="${key}"]`);
      if (element && savedFilters[key] !== undefined) {
        if (element.type === 'checkbox') {
          element.checked = savedFilters[key];
        } else if (element.type === 'radio') {
          if (element.value === savedFilters[key]) {
            element.checked = true;
          }
        } else {
          element.value = savedFilters[key];
        }
      }
    });
    
    // Save filters on form change
    const saveFilters = debounce(function() {
      const formData = new FormData(form);
      const filters = {};
      
      for (let [key, value] of formData.entries()) {
        filters[key] = value;
      }
      
      // Also capture unchecked checkboxes
      form.querySelectorAll('input[type="checkbox"]').forEach(cb => {
        if (!cb.checked) {
          filters[cb.name] = false;
        }
      });
      
      FilterPersistence.save(screenName, filters);
    }, 300);
    
    // Listen for changes
    form.addEventListener('change', saveFilters);
    form.addEventListener('input', saveFilters);
  }

  // Expose globally
  // Copy to clipboard function
  function copyToClipboard(text, message) {
      if (navigator.clipboard && window.isSecureContext) {
          navigator.clipboard.writeText(text).then(function() {
              showToast(message || 'تم النسخ بنجاح', 'success');
          }).catch(function() {
              fallbackCopyTextToClipboard(text, message);
          });
      } else {
          fallbackCopyTextToClipboard(text, message);
      }
  }

  function fallbackCopyTextToClipboard(text, message) {
      var textArea = document.createElement("textarea");
      textArea.value = text;
      textArea.style.top = "0";
      textArea.style.left = "0";
      textArea.style.position = "fixed";
      textArea.style.opacity = "0";
      
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
          document.execCommand('copy');
          showToast(message || 'تم النسخ بنجاح', 'success');
      } catch (err) {
          showToast('فشل في النسخ', 'error');
      }
      
      document.body.removeChild(textArea);
  }

  // Toast notification function
  function showToast(message, type) {
      var toast = document.createElement('div');
      toast.className = 'toast toast-' + (type || 'info');
      toast.textContent = message;
      toast.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: var(--color-card);
          color: var(--color-text);
          padding: 12px 16px;
          border-radius: var(--radius);
          box-shadow: var(--shadow-md);
          border-left: 4px solid var(--color-${type === 'success' ? 'success' : type === 'error' ? 'error' : 'primary'});
          z-index: 1000;
          opacity: 0;
          transform: translateX(100%);
          transition: all 0.3s ease;
          max-width: 300px;
          font-size: 0.875rem;
      `;
      
      document.body.appendChild(toast);
      
      setTimeout(function() {
          toast.style.opacity = '1';
          toast.style.transform = 'translateX(0)';
      }, 10);
      
      setTimeout(function() {
          toast.style.opacity = '0';
          toast.style.transform = 'translateX(100%)';
          setTimeout(function() {
              if (toast.parentNode) {
                  document.body.removeChild(toast);
              }
          }, 300);
      }, 3000);
  }

  // Enhanced confirmation dialog
  function confirmAction(message) {
      return confirm(message);
  }

  // Table preferences persistence
  function saveTablePreferences(screenId, preferences) {
      localStorage.setItem('table_prefs_' + screenId, JSON.stringify(preferences));
  }

  function loadTablePreferences(screenId) {
      var saved = localStorage.getItem('table_prefs_' + screenId);
      return saved ? JSON.parse(saved) : {};
  }

  // Initialize table preferences on page load
  document.addEventListener('DOMContentLoaded', function() {
      var screenId = window.location.pathname.replace(/\//g, '_');
      var prefs = loadTablePreferences(screenId);
      
      // Apply saved page size
      if (prefs.pageSize) {
          var pageSizeSelect = document.querySelector('select[name="per_page"]');
          if (pageSizeSelect) {
              pageSizeSelect.value = prefs.pageSize;
          }
      }
      
      // Save page size changes
      var pageSizeSelect = document.querySelector('select[name="per_page"]');
      if (pageSizeSelect) {
          pageSizeSelect.addEventListener('change', function() {
              var prefs = loadTablePreferences(screenId);
              prefs.pageSize = this.value;
              saveTablePreferences(screenId, prefs);
          });
      }
  });

  window.debounce = debounce;
  window.showLoading = showLoading;
  window.hideLoading = hideLoading;
  window.FilterPersistence = FilterPersistence;
  // Safe layer: handles ok/json, returns null on error, NEVER throws
  async function safeFetch(url, options = {}) {
    try {
      var res = await fetchWithTimeout(url, options);
      if (!res || !res.ok) return null;
      try { 
        return await res.json(); 
      } catch(_) { 
        return null; 
      }
    } catch(_) { 
      return null; 
    }
  }
  
  // HTTP Error Messages in Arabic
  function getHttpErrorMessage(status) {
    const errorMessages = {
      400: 'طلب غير صحيح - تأكد من البيانات المرسلة',
      401: 'غير مصرح - يرجى تسجيل الدخول مرة أخرى',
      403: 'ممنوع الوصول - ليس لديك صلاحية للوصول',
      404: 'الصفحة غير موجودة',
      408: 'تم تجاوز وقت الانتظار',
      429: 'تم تجاوز حد الطلبات - انتظر قليلاً',
      500: 'خطأ في الخادم - يرجى المحاولة لاحقاً',
      502: 'خطأ في الاتصال بالخادم',
      503: 'الخدمة غير متاحة مؤقتاً',
      504: 'تجاوز وقت انتظار الخادم'
    };
    
    return errorMessages[status] || `خطأ في الخادم (${status}) - يرجى المحاولة مرة أخرى`;
  }
  
  // UI layer: optional toast, but do NOT throw; NO recursion
  async function fetchWithToast(url, options = {}) {
    var data = await safeFetch(url, options);
    if (data === null) {
      // (Optional) throttled toast; do NOT throw
      var now = Date.now();
      if (!window.__toastTS__ || now - window.__toastTS__ > 60000) {
        window.__toastTS__ = now;
        // showToast && showToast({type:'TIMEOUT', message:'تم تجاوز وقت الانتظار - تحقق من اتصالك بالإنترنت', duration:5000});
      }
    }
    return data;
  }
  
  // Replace original fetch with enhanced version
  const originalFetch = window.fetch;
  window.fetch = window.fetchWithToast = fetchWithToast;

  window.copyToClipboard = copyToClipboard;
  window.showToast = showToast;
  window.confirmAction = confirmAction;
  window.saveTablePreferences = saveTablePreferences;
  window.safeFetch = safeFetch;
})();

// ===== Form Validation System =====
(function() {
  'use strict';
  
  // Validation helper functions
  function validatePhone(value) {
    // Libyan phone: +218/218/0 followed by 9 digits
    var cleaned = value.replace(/[^0-9+]/g, '');
    return /^(\+218|218|0)?[0-9]{9}$/.test(cleaned);
  }
  
  function validateAmount(value, min, max) {
    var num = parseFloat(value);
    if (isNaN(num)) return { valid: false, message: 'يجب إدخال رقم صحيح' };
    if (min !== undefined && num < min) return { valid: false, message: 'القيمة أقل من الحد الأدنى: ' + min };
    if (max !== undefined && num > max) return { valid: false, message: 'القيمة أكبر من الحد الأقصى: ' + max };
    return { valid: true };
  }
  
  function showFieldError(input, message) {
    // Remove existing error
    var existingError = input.parentNode.querySelector('.field-error');
    if (existingError) existingError.remove();
    
    // Add error class to input
    input.classList.add('is-invalid');
    input.setAttribute('aria-invalid', 'true');
    
    // Create error message
    if (message) {
      var errorDiv = document.createElement('div');
      errorDiv.className = 'field-error';
      errorDiv.style.cssText = 'color: var(--error-color); font-size: 0.875rem; margin-top: 0.375rem; display: flex; align-items: start; gap: 0.25rem;';
      errorDiv.innerHTML = '<span style="flex-shrink: 0;">⚠</span> <span>' + message + '</span>';
      errorDiv.setAttribute('role', 'alert');
      
      // Insert after input or after its description
      var target = input.nextElementSibling;
      if (target && target.classList.contains('form-text')) {
        target.parentNode.insertBefore(errorDiv, target.nextSibling);
      } else {
        input.parentNode.insertBefore(errorDiv, target);
      }
    }
  }
  
  function clearFieldError(input) {
    input.classList.remove('is-invalid');
    input.removeAttribute('aria-invalid');
    var error = input.parentNode.querySelector('.field-error');
    if (error) error.remove();
  }
  
  function validateInput(input) {
    var value = input.value.trim();
    var type = input.type;
    var required = input.hasAttribute('required');
    var min = input.getAttribute('min');
    var max = input.getAttribute('max');
    var pattern = input.getAttribute('pattern');
    var minlength = input.getAttribute('minlength');
    
    // Clear previous errors
    clearFieldError(input);
    input.setCustomValidity('');
    
    // Required check
    if (required && !value) {
      var message = 'هذا الحقل مطلوب';
      showFieldError(input, message);
      input.setCustomValidity(message);
      return false;
    }
    
    // Skip validation if empty and not required
    if (!value && !required) return true;
    
    // Type-specific validation
    if (type === 'tel' || input.inputMode === 'tel') {
      if (!validatePhone(value)) {
        var phoneMsg = 'رقم الهاتف غير صحيح (مثال: 0912345678)';
        showFieldError(input, phoneMsg);
        input.setCustomValidity(phoneMsg);
        return false;
      }
    }
    
    if (type === 'number' || input.inputMode === 'numeric' || input.inputMode === 'decimal') {
      var result = validateAmount(value, parseFloat(min), parseFloat(max));
      if (!result.valid) {
        showFieldError(input, result.message);
        input.setCustomValidity(result.message);
        return false;
      }
    }
    
    if (type === 'url' && value) {
      if (!value.match(/^https?:\/\/.+/i) && !value.match(/^@?[\w]+$/)) {
        var urlMsg = 'يجب إدخال رابط صحيح أو اسم مستخدم';
        showFieldError(input, urlMsg);
        input.setCustomValidity(urlMsg);
        return false;
      }
    }
    
    // Pattern validation
    if (pattern && value) {
      var regex = new RegExp(pattern);
      if (!regex.test(value)) {
        var patternMsg = input.getAttribute('title') || 'الصيغة غير صحيحة';
        showFieldError(input, patternMsg);
        input.setCustomValidity(patternMsg);
        return false;
      }
    }
    
    // Minlength validation
    if (minlength && value.length < parseInt(minlength)) {
      var minMsg = 'يجب أن يكون على الأقل ' + minlength + ' أحرف';
      showFieldError(input, minMsg);
      input.setCustomValidity(minMsg);
      return false;
    }
    
    return true;
  }
  
  function initFormValidation() {
    var forms = document.querySelectorAll('form[data-validate]');
    
    forms.forEach(function(form) {
      var inputs = form.querySelectorAll('input, select, textarea');
      
      // Real-time validation on blur and input
      inputs.forEach(function(input) {
        // Validate on blur
        input.addEventListener('blur', function() {
          validateInput(input);
        }, { passive: true });
        
        // Clear error on input (typing)
        input.addEventListener('input', function() {
          if (input.classList.contains('is-invalid')) {
            validateInput(input);
          }
        }, { passive: true });
        
        // Validate on change for selects
        if (input.tagName === 'SELECT') {
          input.addEventListener('change', function() {
            validateInput(input);
          }, { passive: true });
        }
      });
      
      // Validate on submit
      form.addEventListener('submit', function(e) {
        var isValid = true;
        var firstInvalid = null;
        
        inputs.forEach(function(input) {
          if (!validateInput(input)) {
            isValid = false;
            if (!firstInvalid) firstInvalid = input;
          }
        });
        
        if (!isValid) {
          e.preventDefault();
          
          // Focus first invalid field
          if (firstInvalid) {
            firstInvalid.focus();
            
            // Scroll to first error
            var errorElement = firstInvalid.parentNode.querySelector('.field-error') || firstInvalid;
            errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
          
          return false;
        }
      });
    });
  }
  
  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFormValidation);
  } else {
    initFormValidation();
  }
  
  // Expose for dynamic forms
  window.validateInput = validateInput;
  window.initFormValidation = initFormValidation;
})();

// ===== Sticky Search Bar - REMOVED =====
// Sticky search functionality has been completely removed to fix the stuck search bar issue

// ===== Theme Toggle System - Final Simple Version =====
(function() {
    'use strict';
    
    if(!window.__THEME_TOGGLE__){
        window.__THEME_TOGGLE__=true;
        
        // Simple theme toggle function
        function toggleTheme() {
            var current = document.documentElement.getAttribute('data-theme') || 'dark';
            var next = (current === 'dark' ? 'light' : 'dark');
            
            document.documentElement.setAttribute('data-theme', next);
            
            try {
                localStorage.setItem('theme', next);
            } catch(e) {
                // Ignore localStorage errors
            }
            
            console.log('Theme toggled to:', next);
        }
        
        // Bind theme toggle buttons - Simple approach
        function bindThemeButtons() {
            var buttons = document.querySelectorAll('[data-theme-toggle]');
            for (var i = 0; i < buttons.length; i++) {
                var btn = buttons[i];
                
                // Clear any existing handlers
                btn.onclick = null;
                
                // Set onclick handler
                btn.onclick = function(e) {
                e.preventDefault();
                toggleTheme();
                };
            }
        }
        
        // Initialize when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', bindThemeButtons);
        } else {
            bindThemeButtons();
        }
        
        // Make toggleTheme globally available
        window.toggleTheme = toggleTheme;
    }
})();

// ===== Catalog Sort Controls =====
(function() {
    'use strict';
    
    // Bind sort controls ONCE
    if(!window.__CAT_SORT_BOUND__){
        window.__CAT_SORT_BOUND__=true;
        const root=document, controls=root.querySelectorAll('[data-sort]');
        controls.forEach(el=>{
            el.addEventListener('click', e=>{
                e.preventDefault();
                const sort=el.getAttribute('data-sort')||'default';
                const url=new URL(location.href);
                url.searchParams.set('sort', sort);
                url.searchParams.set('page','1');
                localStorage.setItem('catalog_sort', sort);
                // show skeleton
                document.getElementById('grid')?.setAttribute('hidden','');
                document.getElementById('grid-skel')?.removeAttribute('hidden');
                safeFetchHTML(url.toString(),{timeout:8000,credentials:'same-origin',cache:'no-store'})
                    .then(html=>{
                        if(!html) return;
                        const tmp=document.createElement('div'); tmp.innerHTML=html;
                        const newGrid=tmp.querySelector('#grid');
                        if(newGrid){ const g=document.getElementById('grid'); g&&g.replaceWith(newGrid); }
                        // update active state
                        controls.forEach(c=>c.setAttribute('aria-pressed','false'));
                        el.setAttribute('aria-pressed','true');
                        history.replaceState(null,'',url);
                    })
                    .finally(()=>{
                        document.getElementById('grid-skel')?.setAttribute('hidden','');
                        document.getElementById('grid')?.removeAttribute('hidden');
                    });
            });
        });
    }
    
    // On load, mark current sort
    const cur=new URL(location.href).searchParams.get('sort')||localStorage.getItem('catalog_sort')||'default';
    document.querySelector(`[data-sort="${cur}"]`)?.setAttribute('aria-pressed','true');
})();

// ===== CLEANED JAVASCRIPT - REMOVED DUPLICATES AND UNUSED CODE =====
if(!window.__LEADERBOARD__){
    window.__LEADERBOARD__=true;
    
    async function fetchLeaderboard(url){
        try{
            const response = await fetch(url, {
                headers: {'X-Requested-With':'XMLHttpRequest'},
                cache:'no-store',
                credentials:'same-origin'
            });
            return response.ok ? await response.json() : null;
        }catch(error){
            console.error('Leaderboard fetch error:', error);
            return null;
        }
    }
    
    async function loadLeaderboard(queryString = ''){
        const container = document.getElementById('lb-box'); 
        if(!container) return;
        
        container.classList.add('is-loading');
        container.innerHTML = '<div class="loading">جاري التحميل...</div>';
        
        const data = await fetchLeaderboard('/api/leaderboard.php' + queryString); 
        container.classList.remove('is-loading');
        
        if(!data || !Array.isArray(data.top)) { 
            container.innerHTML = '<div class="empty">لا توجد بيانات حالياً</div>'; 
            return; 
        }
        
        if(data.top.length === 0) {
            container.innerHTML = '<div class="empty">لا توجد بيانات للشهر المحدد</div>'; 
            return;
        }
        
        container.innerHTML = data.top.map((row, index) => {
            const rank = index + 1;
            const prize = (rank === 1 ? 40 : rank === 2 ? 25 : rank === 3 ? 10 : (rank >= 4 && rank <= 7 ? 1 : 0));
            return `<div class="lb-row">
                <div class="rank">#${rank}</div>
                <div class="name">${row.name_masked}</div>
                <div class="spent">LYD ${Number(row.spent).toFixed(2)}</div>
                <div class="prize">${prize ? `+${prize} LYD` : ''}</div>
            </div>`;
        }).join('');
    }
    
    document.addEventListener('DOMContentLoaded', () => { 
        loadLeaderboard(''); 
    });
    
    document.querySelector('[data-lb-prev]')?.addEventListener('click', e => {
        e.preventDefault();
        const date = new Date(); 
        date.setMonth(date.getMonth() - 1);
        const yearMonth = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0');
        loadLeaderboard('?month=' + yearMonth);
    });
    
    document.querySelector('[data-lb-cur]')?.addEventListener('click', e => {
        e.preventDefault(); 
        loadLeaderboard(''); 
    });
}

// ===== CATALOG HIERARCHICAL FILTERS =====
if(!window.__CATALOG_FILTERS__){
    window.__CATALOG_FILTERS__=true;
    
    // Helper function for safe fetch
    async function safeFetch(url, options = {}) {
        try {
            const response = await fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Cache-Control': 'no-cache'
                },
                ...options
            });
            return response.ok ? await response.text() : null;
        } catch (error) {
            return null;
        }
    }
    
    // Update catalog content with shimmer
    async function updateCatalogContent(params = {}) {
        const contentContainer = document.getElementById('catalog-content');
        if (!contentContainer) return;
        
        // Show shimmer
        contentContainer.classList.add('is-loading');
        
        // Build URL with current params
        const url = new URL(window.location);
        Object.keys(params).forEach(key => {
            if (params[key] && params[key] !== 'all') {
                url.searchParams.set(key, params[key]);
            } else {
                url.searchParams.delete(key);
            }
        });
        
        // Fetch new content
        const newContent = await safeFetch(url.toString());
        
        if (newContent) {
            // Parse response and extract catalog content
            const parser = new DOMParser();
            const doc = parser.parseFromString(newContent, 'text/html');
            const newCatalogContent = doc.getElementById('catalog-content');
            
            if (newCatalogContent) {
                contentContainer.innerHTML = newCatalogContent.innerHTML;
            }
        }
        
        // Hide shimmer
        contentContainer.classList.remove('is-loading');
    }
    
    // Initialize filter handlers
    function initCatalogFilters() {
        // Platform filter
        const platformSelect = document.querySelector('select[name="platform"], select[data-filter="platform"]');
        if (platformSelect) {
            platformSelect.addEventListener('change', function() {
                updateCatalogContent({ platform: this.value });
            });
        }
        
        // Type filter
        const typeSelect = document.querySelector('select[name="type"], select[data-filter="type"]');
        if (typeSelect) {
            typeSelect.addEventListener('change', function() {
                updateCatalogContent({ type: this.value });
            });
        }
        
        // Sort filter
        const sortSelect = document.querySelector('select[name="sort"], select[data-filter="sort"]');
        if (sortSelect) {
            sortSelect.addEventListener('change', function() {
                updateCatalogContent({ sort: this.value });
            });
        }
        
        // Search input
        const searchInput = document.querySelector('input[name="q"], input[data-filter="search"]');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    updateCatalogContent({ q: this.value.trim() });
                }, 300);
            });
        }
        
        // Filter buttons
        document.querySelectorAll('[data-filter-platform]').forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                updateCatalogContent({ platform: this.dataset.filterPlatform });
            });
        });
        
        document.querySelectorAll('[data-filter-type]').forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                updateCatalogContent({ type: this.dataset.filterType });
            });
        });
        
        document.querySelectorAll('[data-filter-sort]').forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                updateCatalogContent({ sort: this.dataset.filterSort });
            });
        });
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initCatalogFilters);
    } else {
        initCatalogFilters();
    }
}

// ===== TOP TABS FUNCTIONALITY =====
if(!window.__TOP_TABS__){
    window.__TOP_TABS__=true;
    
    // Theme toggle functionality
    if(!window.__THEME_TOGGLE__){
        window.__THEME_TOGGLE__=true;
        var root=document.documentElement, btn=document.querySelector('[data-theme-toggle]');
        var saved=localStorage.getItem('theme');
        if(saved){ root.setAttribute('data-theme', saved); }
        else if(window.matchMedia && matchMedia('(prefers-color-scheme: light)').matches){ root.setAttribute('data-theme','light'); }
        function setTheme(t){ root.setAttribute('data-theme',t); localStorage.setItem('theme',t); }
        btn && btn.addEventListener('click', function(e){
            e.preventDefault();
            var cur=root.getAttribute('data-theme')||'dark';
            setTheme(cur==='dark'?'light':'dark');
        });
    }
    
    // Active tab state based on current pathname
    (function(){
        var path=location.pathname.replace(/\/+$/,'')||'/';
        function act(sel){ var el=document.querySelector(sel); el && el.classList.add('is-active'); }
        if(path==='/'||path==='/index.php'){ act('[data-route="home"]'); }
        else if(path==='/leaderboard.php'){ act('[data-route="leaderboard"]'); }
    })();
}